# -*- coding: utf-8 -*-
import discord
from discord.ext import commands, tasks
import asyncio
from yt_dlp import YoutubeDL
from youtubesearchpython import VideosSearch
import re

# ---------- KONFIG ----------
TOKEN = "MTQyMDMyNDE4NzEyOTc3NDE1NA.GZbtgr.2I9U2D17CT1lRuTVr6iEK4C3nebBScfNCWJSWA"  # <--- ide m√°sold a bot tokened
PREFIX = "!"
INTENTS = discord.Intents.default()
INTENTS.message_content = True
# ---------------------------

bot = commands.Bot(command_prefix=PREFIX, intents=INTENTS)

# FFmpeg + yt-dlp opci√≥k
YTDL_OPTS = {
    "format": "bestaudio",
    "noplaylist": True,
    "quiet": True,
    "no_warnings": True,
    "default_search": "auto",
    "source_address": "0.0.0.0"
}
FFMPEG_OPTS = {
    "options": "-vn"
}

ytdl = YoutubeDL(YTDL_OPTS)

# Regex a YouTube link felismer√©s√©hez (r√∂vid √©s hossz√∫)
YOUTUBE_URL_REGEX = re.compile(r"(https?://)?(www\.)?(youtube\.com|youtu\.be)/")

# Per-guild zenei √°llapot t√°rol√°sa
class GuildMusic:
    def __init__(self):
        self.queue = []             # lista: (webstream_url, title, original_query)
        self.history = []           # lej√°tszottak list√°ja (title, url)
        self.current = None         # (title, url)
        self.voice_client = None    # discord.VoiceClient
        self.playing = False
        self.autoplay = False
        self.control_message = None # az az √ºzenet, amelyre reakci√≥k ker√ºlnek
        self.lock = asyncio.Lock()  # a queue kezel√©se k√∂zben

    def enqueue(self, entry):
        self.queue.append(entry)

    def enqueue_front(self, entry):
        self.queue.insert(0, entry)

    def has_next(self):
        return len(self.queue) > 0

guild_music = {}  # guild_id -> GuildMusic

def get_gm(ctx):
    gid = ctx.guild.id
    if gid not in guild_music:
        guild_music[gid] = GuildMusic()
    return guild_music[gid]

# ---------- Seg√©df√ºggv√©nyek ----------
async def ensure_voice(ctx, gm: GuildMusic):
    """Csatlakozik a felhaszn√°l√≥ hangcsatorn√°j√°hoz, ha m√©g nincs voice client."""
    if ctx.author.voice is None:
        await ctx.send("El≈ësz√∂r csatlakozz egy voice channelhez!")
        return False

    channel = ctx.author.voice.channel
    if gm.voice_client is None or not gm.voice_client.is_connected():
        gm.voice_client = await channel.connect()
    else:
        # ha m√°s csatorn√°ban van, csatlakozz √°t
        if gm.voice_client.channel != channel:
            await gm.voice_client.move_to(channel)
    return True

def is_url(query: str) -> bool:
    return bool(YOUTUBE_URL_REGEX.search(query))

def ytdl_extract(query: str):
    """yt-dlp-val kinyeri a stream URL-t √©s a c√≠met. query lehet link vagy keres≈ëkifejez√©s."""
    info = ytdl.extract_info(query, download=False)
    # Ha playlistet ad vissza, vegy√ºk az els≈ë elemet
    if "entries" in info:
        info = info["entries"][0]
    # 'url' mez≈ë sokszor a k√∂zvetlen stream URL
    stream_url = info.get("url")
    title = info.get("title")
    webpage_url = info.get("webpage_url") or query
    return stream_url, title, webpage_url

async def search_youtube_first(query: str):
    """YouTube keres√©s: els≈ë tal√°lat linkje √©s c√≠me."""
    vs = VideosSearch(query, limit=1)
    res = vs.result().get("result")
    if not res:
        return None, None
    first = res[0]
    return first.get("link"), first.get("title")

async def build_control_message_embed(gm: GuildMusic):
    embed = discord.Embed(title="üé∂ Music Bot vez√©rl≈ë", colour=discord.Colour.blurple())
    now = gm.current[0] if gm.current else "‚Äî"
    embed.add_field(name="Most j√°tsz√≥dik", value=now, inline=False)
    q = "\n".join([f"{i+1}. {item[1]}" for i, item in enumerate(gm.queue[:10])]) or "√úres"
    embed.add_field(name=f"Queue ({len(gm.queue)})", value=q, inline=False)
    embed.set_footer(text=f"Autoplay: {'ON' if gm.autoplay else 'OFF'}")
    return embed

async def send_or_update_control_message(ctx, gm: GuildMusic):
    embed = await build_control_message_embed(gm)
    if gm.control_message and not gm.control_message.deleted:
        try:
            await gm.control_message.edit(embed=embed)
            return gm.control_message
        except Exception:
            gm.control_message = None
    # k√ºld√ºnk √∫jat
    msg = await ctx.send(embed=embed)
    gm.control_message = msg
    # reakci√≥k hozz√°ad√°sa egyszer
    try:
        for r in ("‚èØ", "‚è≠", "‚èÆ", "‚èπ", "üîÅ"):
            await msg.add_reaction(r)
    except Exception:
        pass
    return msg

async def play_next_track(ctx, gm: GuildMusic):
    """Lej√°tssza a k√∂vetkez≈ë tracket a queue-b√≥l. Visszah√≠v√≥dik after-ban."""
    async with gm.lock:
        if gm.voice_client is None:
            return
        if gm.voice_client.is_playing():
            return

        # ha nincs a queue-ban semmi -> autoplay logika
        if not gm.has_next():
            if gm.autoplay and gm.current:
                # egyszer≈± autoplay: keres√ºnk hasonl√≥ (a jelenlegi c√≠m + 'related' keres√©s)
                base_title = gm.current[0]
                query = base_title + " related"
                link, title = await search_youtube_first(query)
                if link:
                    try:
                        stream_url, real_title, web_url = ytdl_extract(link)
                        gm.enqueue((stream_url, real_title, web_url))
                    except Exception:
                        pass

        if not gm.has_next():
            gm.playing = False
            # friss√≠tj√ºk a kontroll √ºzenetet, ha van
            try:
                if gm.control_message:
                    await send_or_update_control_message(ctx, gm)
            except Exception:
                pass
            return

        # vegy√ºk ki a k√∂vetkez≈ët
        stream_url, title, web_url = gm.queue.pop(0)
        gm.current = (title, web_url)
        gm.history.append((title, web_url))
        gm.playing = True

        # l√©trehozzuk a ffmpeg forr√°st √©s lej√°tsszuk
        try:
            source = discord.FFmpegPCMAudio(stream_url, **FFMPEG_OPTS)
            player = discord.PCMVolumeTransformer(source, volume=0.9)
            def after_play(error):
                # az after h√≠v√°s szinkron threadb≈ël j√∂n -> schedule coroutine
                coro = play_next_track(ctx, gm)
                fut = asyncio.run_coroutine_threadsafe(coro, bot.loop)
                try:
                    fut.result()
                except Exception:
                    pass

            gm.voice_client.play(player, after=after_play)
            # friss√≠tj√ºk a kontroll √ºzenetet
            try:
                if gm.control_message:
                    await send_or_update_control_message(ctx, gm)
            except Exception:
                pass
        except Exception as e:
            await ctx.send(f"Hiba a lej√°tsz√°sn√°l: {e}")
            # pr√≥b√°ljuk a k√∂vetkez≈ët
            await play_next_track(ctx, gm)

# ---------- Parancsok ----------
@bot.event
async def on_ready():
    print(f"Bejelentkezve: {bot.user} (id: {bot.user.id})")

@bot.command(name="play", aliases=["p"])
async def play(ctx, *, query: str):
    """!play <link vagy keres≈ëkifejez√©s> - linkkel pontos, n√©vvel az els≈ë tal√°latot j√°tssza"""
    gm = get_gm(ctx)
    if not await ensure_voice(ctx, gm):
        return

    await ctx.trigger_typing()

    # ha link
    try:
        if is_url(query):
            # direkt linket kapunk
            stream_url, title, web_url = ytdl_extract(query)
        else:
            # keres√©s -> els≈ë tal√°lat
            link, title = await search_youtube_first(query)
            if not link:
                await ctx.send("Nem tal√°ltam semmit a keres√©sre.")
                return
            stream_url, title, web_url = ytdl_extract(link)
    except Exception as e:
        await ctx.send(f"Hiba a YouTube lek√©r√©sn√©l: {e}")
        return

    # betessz√ºk a queue-ba
    async with gm.lock:
        gm.enqueue((stream_url, title, web_url))

    await ctx.send(f"‚úÖ Hozz√°adva a queue-hoz: **{title}**")
    # ha nincs most semmi lej√°tsz√°s alatt, ind√≠tsuk el
    if not gm.playing:
        await play_next_track(ctx, gm)

    # kontroll √ºzenet √©s reakci√≥k
    await send_or_update_control_message(ctx, gm)

@bot.command(name="queue", aliases=["q"])
async def show_queue(ctx):
    gm = get_gm(ctx)
    embed = await build_control_message_embed(gm)
    await ctx.send(embed=embed)

@bot.command(name="skip", aliases=["s"])
async def skip(ctx):
    gm = get_gm(ctx)
    if gm.voice_client and gm.voice_client.is_playing():
        gm.voice_client.stop()  # after callback h√≠vja a k√∂vetkez≈ët
        await ctx.send("‚è≠ Kihagyva.")
    else:
        await ctx.send("Nincs mit kihagyni.")

@bot.command(name="pause")
async def pause(ctx):
    gm = get_gm(ctx)
    if gm.voice_client and gm.voice_client.is_playing():
        gm.voice_client.pause()
        await ctx.send("‚è∏ Le√°ll√≠tva.")
    else:
        await ctx.send("Nem megy semmi.")

@bot.command(name="resume")
async def resume(ctx):
    gm = get_gm(ctx)
    if gm.voice_client and gm.voice_client.is_paused():
        gm.voice_client.resume()
        await ctx.send("‚ñ∂ Folytatva.")
    else:
        await ctx.send("Nincs sz√ºneteltetett zen√©d.")

@bot.command(name="stop")
async def stop(ctx):
    gm = get_gm(ctx)
    if gm.voice_client:
        gm.queue.clear()
        gm.playing = False
        gm.current = None
        gm.voice_client.stop()
        try:
            await gm.voice_client.disconnect()
        except Exception:
            pass
        gm.voice_client = None
        await ctx.send("‚èπ Le√°ll√≠tva √©s bontva a csatlakoz√°s.")
    else:
        await ctx.send("A bot nincs csatlakozva.")

@bot.command(name="autoplay")
async def toggle_autoplay(ctx):
    gm = get_gm(ctx)
    gm.autoplay = not gm.autoplay
    await ctx.send(f"üîÅ Autoplay {'bekapcsolva' if gm.autoplay else 'kikapcsolva'}.")
    if gm.control_message:
        await send_or_update_control_message(ctx, gm)

@bot.command(name="previous", aliases=["prev"])
async def previous(ctx):
    gm = get_gm(ctx)
    if len(gm.history) >= 2:
        # az aktu√°lis a history utols√≥, az el≈ëz≈ë a -2
        prev_title, prev_web = gm.history[-2]
        try:
            stream_url, title, web_url = ytdl_extract(prev_web)
            # ahogy k√©rted: h√°tra l√©p√©s -> el≈ëre j√°tsszuk a kor√°bbi tracket (r√°helyezz√ºk a queue el√©)
            async with gm.lock:
                gm.enqueue_front((stream_url, title, web_url))
            # stop-olni fogjuk a mostanit -> next megh√≠v√≥dik √©s el≈ëker√ºl a kor√°bbi
            if gm.voice_client and gm.voice_client.is_playing():
                gm.voice_client.stop()
            await ctx.send(f"‚èÆ Visszal√©ptem: **{title}**")
        except Exception as e:
            await ctx.send(f"Hiba: {e}")
    else:
        await ctx.send("Nincs el≈ëz≈ë sz√°m a historyban.")

# ---------- Reakci√≥kezel√©s (emoji gombok) ----------
@bot.event
async def on_raw_reaction_add(payload: discord.RawReactionActionEvent):
    # figyelj√ºk a kontroll √ºzenetre √©rkez≈ë reakci√≥kat
    if payload.user_id == bot.user.id:
        return

    guild = bot.get_guild(payload.guild_id)
    if guild is None:
        return
    gm = guild_music.get(guild.id)
    if not gm or not gm.control_message:
        return
    if payload.message_id != gm.control_message.id:
        return

    member = guild.get_member(payload.user_id)
    if not member:
        return

    emoji = str(payload.emoji)
    ctx = None
    # pr√≥b√°ljuk meg megszerezni a kontextust egy egyszer≈± dummy ctx-hez
    channel = guild.get_channel(payload.channel_id)
    # parancsok megh√≠v√°sa a reakci√≥ alapj√°n
    try:
        if emoji == "‚èØ":
            # v√°lt√°s pause/resume
            if gm.voice_client and gm.voice_client.is_playing():
                gm.voice_client.pause()
                await channel.send("‚è∏ Le√°ll√≠tva (reakci√≥).")
            elif gm.voice_client and gm.voice_client.is_paused():
                gm.voice_client.resume()
                await channel.send("‚ñ∂ Folytatva (reakci√≥).")
            else:
                await channel.send("Nincs lej√°tsz√°s.")
        elif emoji == "‚è≠":
            if gm.voice_client and (gm.voice_client.is_playing() or gm.voice_client.is_paused()):
                gm.voice_client.stop()
                await channel.send("‚è≠ Kihagyva (reakci√≥).")
            else:
                await channel.send("Nincs mit kihagyni.")
        elif emoji == "‚èÆ":
            # previous - ha van history
            if len(gm.history) >= 2:
                prev_title, prev_web = gm.history[-2]
                stream_url, title, web_url = ytdl_extract(prev_web)
                async with gm.lock:
                    gm.enqueue_front((stream_url, title, web_url))
                if gm.voice_client and gm.voice_client.is_playing():
                    gm.voice_client.stop()
                await channel.send(f"‚èÆ Visszal√©ptem (reakci√≥): **{title}**")
            else:
                await channel.send("Nincs el≈ëz≈ë sz√°m.")
        elif emoji == "‚èπ":
            # stop + disconnect
            if gm.voice_client:
                gm.queue.clear()
                gm.playing = False
                gm.current = None
                try:
                    gm.voice_client.stop()
                    await gm.voice_client.disconnect()
                except Exception:
                    pass
                gm.voice_client = None
                await channel.send("‚èπ Le√°ll√≠tva √©s bontva (reakci√≥).")
            else:
                await channel.send("A bot nincs csatlakozva.")
        elif emoji == "üîÅ":
            gm.autoplay = not gm.autoplay
            await channel.send(f"üîÅ Autoplay {'bekapcsolva' if gm.autoplay else 'kikapcsolva'} (reakci√≥).")
        # friss√≠ts√ºk a kontroll √ºzenetet
        try:
            await send_or_update_control_message(channel, gm)
        except Exception:
            pass
    except Exception as e:
        try:
            await channel.send(f"Reakci√≥kezel√©si hiba: {e}")
        except Exception:
            pass
    finally:
        # pr√≥b√°ljuk t√∂r√∂lni a felhaszn√°l√≥ reakci√≥j√°t, hogy √∫jra tudja nyomni
        try:
            channel_obj = guild.get_channel(payload.channel_id)
            msg = await channel_obj.fetch_message(payload.message_id)
            await msg.remove_reaction(payload.emoji, member)
        except Exception:
            pass

# ---------- Hibakezel√©s egyszer≈±en ----------
@bot.event
async def on_command_error(ctx, error):
    if isinstance(error, commands.CommandNotFound):
        return
    await ctx.send(f"Hiba: {error}")

# ---------- Ind√≠t√°s ----------
if __name__ == "__main__":
    bot.run(TOKEN)
